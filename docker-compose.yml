version: '3.8'


services:
    mongo:
        image: mongo:4.4.8
        restart: always
        volumes:
            - ${VOLUMES_PATH}/mongo:/data/db
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 40s

    influx-db:
        image: influxdb:2.1-alpine
        restart: always
        healthcheck:
            test:  wget --no-cache --spider http://localhost:8086/ping
            interval: 30s
            timeout: 30s
            retries: 3
        environment:
            DOCKER_INFLUXDB_INIT_MODE: setup
            DOCKER_INFLUXDB_INIT_USERNAME: "${INFLUXDB_USERNAME}"
            DOCKER_INFLUXDB_INIT_PASSWORD: "${INFLUXDB_PASSWORD}"
            DOCKER_INFLUXDB_INIT_ORG: "${INFLUXDB_ORGANIZATION}"
            DOCKER_INFLUXDB_INIT_BUCKET: "${INFLUXDB_BUCKET}"
            DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "${INFLUXDB_ADMIN_TOKEN}"
        volumes:
                - ${VOLUMES_PATH}/influx:/var/lib/influxdb
        ports:
            - '${INFLUXDB_PORT}:8086'

    rabbitmq:
        build: ./rabbitmq
        restart: always
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3
        ports:
            - ${MQTT_PORT}:1883
            - ${MQTTS_PORT}:8883
        volumes:
            - ${VOLUMES_PATH}/rabbitmq:/keys

    node-red:
        build: ./node-red
        restart: always
        ports:
            - ${NODE_RED_PORT}:1880
        environment:
            - PLATFORM_URL=http://iot-server:8085
        volumes:
            - ${VOLUMES_PATH}/node-red:/node-red/data

    iot-auth:
        image: founek2/iot-platform
        command: "node ./packages/backend-auth/dist/index.js"
        restart: always
        healthcheck:
            test: curl --fail http://localhost:8084 || exit 1
            interval: 30s
            retries: 3
            start_period: 20s
            timeout: 10s
        volumes:
            - ${VOLUMES_PATH}/auth:/keys
        environment:
            DATABASE_URI: '${DATABASE_URI}'
            OAUTH_SEZNAM_CLIENT_SECRET: "${OAUTH_SEZNAM_CLIENT_SECRET}"
            OAUTH_SEZNAM_CLIENT_ID: "${OAUTH_SEZNAM_CLIENT_ID}"
            LOG_LEVEL: "${LOG_LEVEL}"
            JWT_EXPIRES_IN: "${JWT_EXPIRES_IN}"
        depends_on:
            - mongo

    iot-mqtt:
        image: founek2/iot-platform
        command: "node ./packages/backend-mqtt/dist/index.js"
        restart: always
        healthcheck:
            test: curl --fail http://localhost:8083 || exit 1
            interval: 30s
            retries: 3
            start_period: 20s
            timeout: 10s
        environment:
            SERVICE_AUTH_URI: http://iot-auth:8084
            INFLUX_URL: "http://influx-db:8086"
            INFLUX_API_KEY: "${INFLUXDB_ADMIN_TOKEN}"
            INFLUX_ORGANIZATION: "${INFLUXDB_ORGANIZATION}"
            INFLUX_BUCKET: "${INFLUXDB_BUCKET}"
            DATABASE_URI: '${DATABASE_URI}'
            FIREBASE_ADMIN_PATH: "${FIREBASE_ADMIN_PATH}"
            LOG_LEVEL: "${LOG_LEVEL}"
            JWT_EXPIRES_IN: "${JWT_EXPIRES_IN}"
            MQTT_URL: mqtts://rabbitmq
        volumes:
            - ${VOLUMES_PATH}/auth:/keys
        depends_on:
            - mongo
            - iot-auth
            - influx-db
    iot-server:
        image: founek2/iot-platform
        command: "node ./packages/backend/dist/index.js"
        restart: always
        healthcheck:
            test: curl --fail http://localhost:8085 || exit 1
            interval: 30s
            retries: 3
            start_period: 20s
            timeout: 10s
        ports:
            - ${PLATFORM_PORT}:8085
        environment:
            SERVICE_AUTH_URI: http://iot-auth:8084
            SERVICE_MQTT_URI: http://iot-mqtt:8083
            DATABASE_URI: '${DATABASE_URI}'
            AGENDA_JOB_TYPES: "${AGENDA_JOB_TYPES}"
            LOG_LEVEL: "${LOG_LEVEL}"
            JWT_EXPIRES_IN: "${JWT_EXPIRES_IN}"
        volumes:
            - ${VOLUMES_PATH}/auth:/keys
        depends_on:
            - mongo
            - iot-auth


